#!/usr/bin/perl
use strict;
use warnings;

use Time::Piece;
use Data::Dump;

my $InputFile = "/tmp/files";
my $FindCommand = "find . -print > $InputFile";
my %FileList = ();
my $RepoDir = "/var/www/html/jdownloads";
my $UnixFile = "$RepoDir/LatestFilesUnix.txt";
my $OutputFile = "$RepoDir/LatestFiles.txt";
my $ConversionCommand = "/usr/bin/perl -p -e 's/\n/\r/g' < LatestFilesUnix.txt > LatestFiles.txt";
my $NumFiles = 0;
my $InputFileSorted = "/tmp/filessorted";
my $VERSION = "1.1.0";
my $filename = "/root/.latestrc";
my $ServerName = "";
my $EDITOR = "/usr/bin/nano";

# See if the EDITOR env var is set, use it if so
if ($ENV{'EDITOR'})
{
        $EDITOR = $ENV{'EDITOR'};
}

my $num_args = $#ARGV + 1;
if ($num_args != 0)
{
	system("$EDITOR $filename");
	exit 0;
}

my $defaultfile = <<'END_TEMPLATE';
# Put Server name here:
Classic Macs OSX Cat Editions
# Get more apps like this at https://marisa-apps.retro-os.live
END_TEMPLATE

if (! -f $filename)
{
	print "Settings file $filename not found, creating it...\n";
	open(FILEOUT, '>', $filename) or die $!;
	#        print FILEOUT "$defaultfile\n";
        print FILEOUT "$defaultfile";
	close(FILEOUT);
	system("$EDITOR $filename");
}

open(FILEIN, '<', $filename) or die $!;
while(<FILEIN>)
{
	# print $_;
	if ((substr($_, 0, 1) eq "#") || ($_ eq ""))
	{
		# skip over comments
		next;
	}
	chop();
	$ServerName = $_;
}
close(FILEIN);

chdir($RepoDir);
system("$FindCommand");
system("sort --output=$InputFileSorted $InputFile");

open(my $fh, '<', $InputFileSorted)
  or die "Could not open file '$InputFileSorted' $!";
 
while (my $row = <$fh>)
{
	chomp $row;
	if (($row eq "..")||($row eq "..")||($row eq "./Desktop Folder")||($row eq "./LatestFiles.txt")||($row eq "./LatestFilesUnix.txt"))
	{
		next;
	}
	if (-d $row)
	{
		# print "$row was a directory\n";
		next;
	}
	if (index($row, "rsrc") != -1)
	{
		#print "Saw it\n";
		next;
	}
	#my $substring = $row;
	#if (my $mystring =~ /\Q\.rsrc\E/)
	#if (my $mystring =~ /rsrc/)
	#{
	#	print qq("$mystring" contains ".rsrc"\n);
	#	next;
	#}

	$row = substr($row, 2);
	# print "new $row\n";
	my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
		$atime,$mtime,$ctime,$blksize,$blocks)
		= stat($row);
	# print "modify time: $mtime\n";
	#$FileList{$mtime} = $row;
	$FileList{$row} = $mtime;
	$NumFiles += 1;

	# print "$FileList{$mtime}\n";
	# print "$FileList{$row}\n";
	# print "$row\n";
}
close ($fh);

sub fmt2 {
   my ($bytes) = @_;
   my @units = qw ( B KB MB GB TB );
   #divide by 1024 whilst above
   while ( $bytes > 1024 ) {
      shift(@units); #drop one of the units prefixes until one 'fits'. 
      $bytes /= 1024;
   }
   return sprintf( '%.3g%s', $bytes, $units[0] );
}
sub fmtsize
{
        my $bytes = shift;

        my @variations = map { sprintf '%.3g%s', $bytes/1024 ** $_->[1], $_->[0] }
            [ " bytes" => 0 ],
            [ KB => 1 ],
            [ MB => 2 ],
            [ GB => 3 ];

        dd \@variations;

        return ( sort { length $a <=> length $b } @variations ) [0];
}

open($fh, '>', $UnixFile)
  or die "Could not open file '$UnixFile' $!";

my $HumanDate = localtime()->strftime('%F %T'); # adjust format to tasprint $fh "Last Scan: $HumanDate\n"
print $fh "Last Scan: $HumanDate\n";
print $fh "Files found: $NumFiles\n";
print $fh "$ServerName Latest Files v$VERSION\n";
print $fh "===================================================\n";
print $fh "Upload Date\t\t\tSize\t\tFile Name\n";
print $fh "-------------\t\t\t---------\t----------\n";

open(my $filelist, '<', $InputFileSorted)
  or die "Could not open file '$InputFileSorted' $!";
while(my $CurFile = <$filelist>)
{
	chomp($CurFile);
	if (length($CurFile) <= 2)
	{
		next;
	}
	$CurFile = substr($CurFile, 2);
	#print "File is '$CurFile'\n";
	#	my $HumanDate = localtime(my $name)->strftime('%F %T'); # adjust format to taste
	if (($CurFile eq "..")||($CurFile eq "..")||($CurFile eq "./Desktop Folder")||($CurFile eq "./LatestFiles.txt")||($CurFile eq "./LatestFilesUnix.txt"))
        {
                next;
        }
        if (-d $CurFile)
        {
                # print "$CurFile was a directory\n";
                next;
        }
        if (index($CurFile, "rsrc") != -1)
        {
                #print "Saw it\n";
                next;
        }
	if ($CurFile eq "")
	{
		next;
	}

	my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
		$atime,$mtime,$ctime,$blksize,$blocks)
		= stat($CurFile);
	$HumanDate = localtime($CurFile)->strftime('%F %T'); # adjust format to taste
	$mtime = localtime($mtime);
	$size = fmt2($size);
	print $fh "$mtime\t$size\t\t$CurFile\n";
}
close($filelist);

##foreach my $name (reverse sort keys %FileList)
#foreach my $name (sort keys %FileList)
#{
#	$HumanDate = localtime($name)->strftime('%F %T'); # adjust format to taste
#	print $fh "$HumanDate\t$FileList{$name}\n";
#}
#close ($fh);
system($ConversionCommand);
exit 0;
